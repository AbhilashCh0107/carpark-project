package com.service.parking.theparker.Controller.Adapters;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.RecyclerView;import com.service.parking.theparker.Controller.Fragment.BookingFragment;import com.service.parking.theparker.Model.ParkingBooking;import com.service.parking.theparker.R;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;public class BookingAdapter extends RecyclerView.Adapter<BookingAdapter.MyBookingViewHolder> {    private final List<ParkingBooking> parkingBookingList;    private Context con;    private  BookingFragment bookingFragment;    public BookingAdapter(List<ParkingBooking> parkingBookingList, Context con, BookingFragment bookingFragment) {        this.parkingBookingList = parkingBookingList;        this.bookingFragment = bookingFragment;        this.con = con;    }    public static String getFormattedDateFromTimestamp(long timestampInMilliSeconds) {        Date date = new Date();        date.setTime(timestampInMilliSeconds);        String formattedDate = new SimpleDateFormat("MMM d, yyyy").format(date);        return formattedDate;    }    @NonNull    @Override    public MyBookingViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        con = parent.getContext();        View itemView = LayoutInflater.from(parent.getContext()).inflate(R.layout.booking_row, parent, false);        return new MyBookingViewHolder(itemView);    }    @Override    public void onBindViewHolder(@NonNull final MyBookingViewHolder myViewHolder, int i) {        ParkingBooking parkingBooking = parkingBookingList.get(i);        myViewHolder.placeName.setText(parkingBooking.getParkingArea());        myViewHolder.price.setText("$" + parkingBooking.getPrice());        myViewHolder.date.setText("Date: " + parkingBooking.getDate());        myViewHolder.paid.setText(!parkingBooking.isPayLater() ? "Paid" : "Unpaid");        myViewHolder.paid.setTextColor(!parkingBooking.isPayLater() ? ContextCompat.getColor(con, R.color.colorPrimaryDark):ContextCompat.getColor(con, R.color.cpb_red));        myViewHolder.slot.setText("Time: " + parkingBooking.getSlot());        myViewHolder.slotName.setText(parkingBooking.getSlotNo()+"("+ parkingBooking.getSlotNumber()+")");        myViewHolder.bookedSlot.setText("Booked: " + parkingBooking.getSlotNumber());        myViewHolder.bookedSlot.setVisibility(View.GONE);        if (parkingBooking.isCompleted()) {            myViewHolder.status.setText("Completed");            myViewHolder.btnComplete.setVisibility(View.GONE);            myViewHolder.btnDirection.setVisibility(View.VISIBLE);            myViewHolder.status.setTextColor(ContextCompat.getColor(con, R.color.colorPrimaryDark));        } else {            myViewHolder.btnComplete.setVisibility(View.VISIBLE);            myViewHolder.btnDirection.setVisibility(View.GONE);            myViewHolder.status.setText("In Progress");            myViewHolder.status.setTextColor(ContextCompat.getColor(con, R.color.cpb_red));        }//                myViewHolder.status.setText(parkingBooking.getParkingArea());    }    @Override    public void onViewRecycled(@NonNull MyBookingViewHolder holder) {        super.onViewRecycled(holder);    }    @Override    public int getItemCount() {        return parkingBookingList.size();    }    public void updateItem(ParkingBooking parkingBooking) {       int added=-1;        for (int i = 0; i < parkingBookingList.size(); i++) {            if (parkingBookingList.get(i).getId().equalsIgnoreCase(parkingBooking.getId())){                added=i;            }        }        if (added!=-1){            parkingBookingList.set(added,parkingBooking);        }else {            parkingBookingList.add(parkingBooking);        }        notifyDataSetChanged();    }    class MyBookingViewHolder extends RecyclerView.ViewHolder {        @BindView(R.id.placeName)        TextView placeName;        @BindView(R.id.btnComplete)        Button btnComplete;        @BindView(R.id.btnDirection)        Button btnDirection;        @BindView(R.id.price)        TextView price;        @BindView(R.id.date)        TextView date;        @BindView(R.id.paid)        TextView paid;        @BindView(R.id.slot)        TextView slot;        @BindView(R.id.slotName)        TextView slotName;        @BindView(R.id.bookedSlot)        TextView bookedSlot;        @BindView(R.id.status)        TextView status;        MyBookingViewHolder(View view) {            super(view);            ButterKnife.bind(this, view);            btnComplete.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    bookingFragment.setCompleted(parkingBookingList.get(getAdapterPosition()));                }            });            btnDirection.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    bookingFragment.setDirection(parkingBookingList.get(getAdapterPosition()));                }            });        }    }}